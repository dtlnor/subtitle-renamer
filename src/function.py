import os
import platform
import shutil
import codecs
import chardet

from src.module.detectsub import detectSubLanguage

# https://github.com/sweezyio/video-extensions-list
VIDEO_EXTENSION = [
    "264",
    "3g2",
    "3gp",
    "3gp2",
    "3gpp",
    "3gpp2",
    "3mm",
    "3p2",
    "60d",
    "787",
    "890",
    "aaf",
    "aec",
    "aecap",
    "aegraphic",
    "aep",
    "aepx",
    "aet",
    "aetx",
    "ajp",
    "ale",
    "am",
    "amc",
    "amv",
    "amv",
    "amx",
    "anim",
    "anx",
    "aqt",
    "arcut",
    "arf",
    "asf",
    "asx",
    "av",
    "av3",
    "avb",
    "avc",
    "avchd",
    "avd",
    "ave",
    "avi",
    "avm",
    "avp",
    "avr",
    "avs",
    "avv",
    "awlive",
    "axm",
    "axv",
    "bdm",
    "bdmv",
    "bdt2",
    "bdt3",
    "bik",
    "bik2",
    "bin",
    "bix",
    "bk2",
    "blz",
    "bmc",
    "bmk",
    "bnp",
    "box",
    "bs4",
    "bsf",
    "bu",
    "bvr",
    "byu",
    "camproj",
    "camrec",
    "camv",
    "ced",
    "cel",
    "cine",
    "cip",
    "clk",
    "clpi",
    "cme",
    "cmmp",
    "cmmtpl",
    "cmproj",
    "cmrec",
    "cmv",
    "cpi",
    "cpvc",
    "crec",
    "cst",
    "cvc",
    "cx3",
    "d2v",
    "d3v",
    "dad",
    "dash",
    "dat",
    "dav",
    "db2",
    "dce",
    "dck",
    "dcr",
    "dcr",
    "ddat",
    "dif",
    "dir",
    "divx",
    "dlx",
    "dmb",
    "dmsd",
    "dmsd3d",
    "dmsm",
    "dmsm3d",
    "dmss",
    "dmx",
    "dnc",
    "dpa",
    "dpg",
    "drc",
    "dream",
    "dsy",
    "dv",
    "dv4",
    "dvdmedia",
    "dvr",
    "dvx",
    "dxr",
    "dzm",
    "dzp",
    "dzt",
    "edl",
    "evo",
    "exo",
    "exp",
    "eye",
    "eyetv",
    "ezt",
    "f4a",
    "f4b",
    "f4f",
    "f4m",
    "f4p",
    "f4v",
    "fbr",
    "fbz",
    "fcarch",
    "fcp",
    "fcproject",
    "ffd",
    "ffm",
    "flc",
    "flh",
    "fli",
    "flic",
    "flv",
    "flx",
    "fpdx",
    "ftc",
    "fvt",
    "g2m",
    "g64",
    "g64x",
    "gcs",
    "gfp",
    "gifv",
    "gl",
    "gom",
    "grasp",
    "gts",
    "gvi",
    "gvp",
    "gxf",
    "h264",
    "hdmov",
    "hdv",
    "hevc",
    "hkm",
    "ifo",
    "imovielibrary",
    "imoviemobile",
    "imovieproj",
    "imovieproject",
    "infovid",
    "infovid",
    "inp",
    "insv",
    "int",
    "ircp",
    "irf",
    "ism",
    "ismc",
    "ismclip",
    "ismv",
    "iva",
    "ivf",
    "ivr",
    "ivs",
    "izz",
    "izzy",
    "jdr",
    "jmv",
    "jnr",
    "jss",
    "jts",
    "jtv",
    "k3g",
    "kdenlive",
    "kmv",
    "ktn",
    "lrec",
    "lrv",
    "lsf",
    "lsx",
    "lvix",
    "m15",
    "m1pg",
    "m1v",
    "m21",
    "m2a",
    "m2p",
    "m2t",
    "m2ts",
    "m2v",
    "m4e",
    "m4p",
    "m4u",
    "m4v",
    "m75",
    "mani",
    "meta",
    "mgv",
    "mj2",
    "mjp",
    "mjpeg",
    "mjpg",
    "mk3d",
    "mkv",
    "mmv",
    "mng",
    "mnv",
    "mob",
    "mod",
    "modd",
    "moff",
    "moi",
    "moov",
    "mov",
    "movie",
    "mp21",
    "mp2v",
    "mp4",
    "mp4v",
    "mpe",
    "mpeg",
    "mpeg1",
    "mpeg2",
    "mpeg4",
    "mpf",
    "mpg",
    "mpg2",
    "mpg4",
    "mpgindex",
    "mpl",
    "mpls",
    "mproj",
    "mpsub",
    "mpv",
    "mpv2",
    "mqv",
    "msdvd",
    "mse",
    "msh",
    "mswmm",
    "mt2s",
    "mts",
    "mtv",
    "mvb",
    "mvc",
    "mvd",
    "mve",
    "mvex",
    "mvp",
    "mvy",
    "mxf",
    "mxv",
    "mys",
    "n3r",
    "ncor",
    "nfv",
    "nsv",
    "ntp",
    "nuv",
    "nvc",
    "ogg",
    "ogm",
    "ogv",
    "ogv",
    "ogx",
    "orv",
    "osp",
    "otrkey",
    "pac",
    "par",
    "pds",
    "pgi",
    "photoshow",
    "piv",
    "pjs",
    "playlist",
    "plproj",
    "pmf",
    "pmv",
    "pns",
    "ppj",
    "prel",
    "pro",
    "pro4dvd",
    "pro5dvd",
    "proqc",
    "prproj",
    "prtl",
    "psb",
    "psh",
    "pssd",
    "psv",
    "pva",
    "pvr",
    "pxv",
    "pz",
    "qsv",
    "qt",
    "qtch",
    "qtindex",
    "qtl",
    "qtm",
    "qtz",
    "r3d",
    "ravi",
    "rcd",
    "rcproject",
    "rcrec",
    "rcut",
    "rdb",
    "rec",
    "rm",
    "rmd",
    "rmp",
    "rms",
    "rmv",
    "rmvb",
    "roq",
    "rp",
    "rsx",
    "rts",
    "rum",
    "rv",
    "rvid",
    "rvl",
    "san",
    "sbk",
    "sbt",
    "sbz",
    "scc",
    "scm",
    "scn",
    "screenflow",
    "sdv",
    "sec",
    "sedprj",
    "seq",
    "ser",
    "sfd",
    "sfera",
    "sfvidcap",
    "siv",
    "smi",
    "smil",
    "smk",
    "sml",
    "smv",
    "snagproj",
    "spl",
    "sqz",
    "srt",
    "ssf",
    "ssm",
    "stl",
    "str",
    "stx",
    "svi",
    "swf",
    "swi",
    "swt",
    "tda3mt",
    "tdt",
    "tdx",
    "theater",
    "thp",
    "tid",
    "tivo",
    "tix",
    "tod",
    "tp",
    "tp0",
    "tpd",
    "tpr",
    "trec",
    "trp",
    "ts",
    "tsp",
    "tsv",
    "ttxt",
    "tvlayer",
    "tvrecording",
    "tvs",
    "tvshow",
    "usf",
    "usm",
    "v264",
    "vbc",
    "vc1",
    "vcpf",
    "vcr",
    "vcv",
    "vdo",
    "vdr",
    "vdx",
    "veg",
    "vem",
    "vep",
    "vf",
    "vft",
    "vfw",
    "vfz",
    "vgz",
    "vid",
    "video",
    "viewlet",
    "viv",
    "vivo",
    "vix",
    "vlab",
    "vmlf",
    "vmlt",
    "vob",
    "vp3",
    "vp6",
    "vp7",
    "vpj",
    "vr",
    "vro",
    "vs4",
    "vse",
    "vsh",
    "vsp",
    "vtt",
    "w32",
    "wcp",
    "webm",
    "wfsp",
    "wgi",
    "wlmp",
    "wm",
    "wmd",
    "wmmp",
    "wmv",
    "wmx",
    "wot",
    "wp3",
    "wpl",
    "wsve",
    "wtv",
    "wvm",
    "wvx",
    "wxp",
    "xej",
    "xel",
    "xesc",
    "xfl",
    "xlmv",
    "xml",
    "xmv",
    "xvid",
    "y4m",
    "yog",
    "yuv",
    "zeg",
    "zm1",
    "zm2",
    "zm3",
    "zmv"
]

def formatRawFileList(raw_file_list, file_list):
    for raw_file in raw_file_list:
        # 转换为文件路径
        file_path = raw_file.toLocalFile()

        # Windows 下调整路径分隔符
        if platform.system() == 'Windows':
            file_path = file_path.replace('/', '\\')

        # 解决 macOS 下路径无法识别
        if file_path.endswith('/'):
            file_path = file_path[:-1]

        # 排除文件夹
        if not os.path.isfile(file_path):
            continue

        file_list.append(file_path)

    file_list = list(set(file_list))  # 去重
    return file_list


def splitList(file_name):
    video_list = []
    sc_list = []
    tc_list = []

    video_extension = VIDEO_EXTENSION
    subtitle_extension = ["ass", "ssa", "srt"]
    # sc_part = ["sc.", "chs.", "[sc]", "[chs]", "sc_", "chs_", "track3", "Subtitles03"]
    # tc_part = ["tc.", "cht.", "[tc]", "[cht]", "tc_", "cht_", "track4", "Subtitles04"]

    name_struct = file_name.split(".")
    extension = name_struct[-1].lower()

    # 视频文件
    if extension in video_extension:
        video_list.append(file_name)

    # 字幕文件
    elif extension in subtitle_extension:
        sub_language = detectSubLanguage(file_name)
        if sub_language == "sc":
            sc_list.append(file_name)
        elif sub_language == "tc":
            tc_list.append(file_name)

    # 重要：排序
    video_list.sort()
    sc_list.sort()
    tc_list.sort()
    return video_list, sc_list, tc_list


def renameAction(lang_format, video_list, sub_list, move_to_folder, encode):
    new_sub_list = []
    sub_id_a = 0
    sub_id_b = 0

    # 新字幕名存入 new_sub_list
    for this_video in video_list:
        this_sub = sub_list[sub_id_a]
        this_video_name = os.path.splitext(os.path.basename(this_video))[0]  # 视频文件名（无扩展名）
        this_video_path = os.path.dirname(this_video)  # 视频路径
        this_sub_path = os.path.dirname(this_sub)  # 字幕路径
        this_sub_extension = os.path.splitext(os.path.basename(this_sub))[-1]  # 字幕扩展名
        separator = os.sep  # 系统路径分隔符

        # 是否要移动至视频文件夹
        if move_to_folder:
            new_sub = this_video_path + separator + this_video_name + lang_format + this_sub_extension
        else:
            new_sub = this_sub_path + separator + this_video_name + lang_format + this_sub_extension

        new_sub_list.append(new_sub)
        new_sub_list.sort()
        sub_id_a += 1

    # 目标目录是否存在同名文件
    for new_sub in new_sub_list:
        if os.path.exists(new_sub):
            return 516

    # 1 => 修改编码
    if encode == "UTF-8" or encode == "UTF-8-SIG":
        for this_sub in sub_list:
            # 识别
            with open(this_sub, "rb") as file:
                sub_data = file.read()
                result = chardet.detect(sub_data)
                encoding = result["encoding"]
                if encoding.lower() == "gb2312":  # 修正解码错误
                    encoding = "gb18030"

            # 忽略错误，强行转换，最为致命~
            with codecs.open(this_sub, "r", encoding=encoding, errors="ignore") as file:
                content = file.read()
            with codecs.open(this_sub, "w", encoding=encode, errors="ignore") as file:
                file.write(content)

    # 2 => 重命名
    for this_sub in sub_list:
        new_sub = new_sub_list[sub_id_b]
        shutil.copy(this_sub, new_sub)
        os.remove(this_sub)
        sub_id_b += 1
